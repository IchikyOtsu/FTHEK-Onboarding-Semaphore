- name: Onboarding - Générer un nom unique et mettre à jour l'inventaire AD
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Interroger l'AD pour obtenir les noms d'ordinateurs
      shell: >
        ldapsearch -x -H "{{ ldap_server }}"
        -D "{{ ldap_user }}"
        -w "{{ ldap_password }}"
        -b "{{ ldap_base }}"
        "(objectClass=computer)"
        name
      register: ldap_output

    - name: Extraire les noms depuis la sortie brute
      set_fact:
        noms_machines_ad: >-
          {{
            ldap_output.stdout.splitlines()
            | select('match', '^name:')
            | map('regex_replace', '^name:\\s*', '')
            | reject('equalto', '')
            | list
          }}

    - name: Lire le fichier d'inventaire existant s’il existe
      slurp:
        src: "{{ inventaire_path }}"
      register: inventaire_slurp
      ignore_errors: yes
    - name: Extraire les machines déjà listées (ou vide si fichier manquant)
      set_fact:
        inventaire_connu: >-
          {{
            (
              inventaire_slurp.content | b64decode | split('\n')
              | reject('match', '^\[.*\]')
              | reject('equalto', '')
              | map('regex_replace', '\.fonteynethekitchen\.local$', '')
              | list
            )
            if (
              inventaire_slurp is defined and
              inventaire_slurp.failed is not defined and
              'content' in inventaire_slurp
            ) else []
          }}




    - name: Fusionner sans doublon
      set_fact:
        inventaire_final: "{{ (inventaire_connu + noms_machines_ad) | unique | sort }}"

    - name: Définir le préfixe de nom
      set_fact:
        prefix: "{{ departement }}-{{ type_machine }}"

    - name: Extraire les noms correspondant au modèle
      set_fact:
        existants: "{{ inventaire_final | select('match', '^' ~ prefix ~ '-\\d{3}$') | list }}"

    - name: Extraire les IDs utilisés
      set_fact:
        existants_ids: "{{ existants | map('regex_replace', '^' ~ prefix ~ '-(\\d{3})$', '\\1') | map('int') | list }}"

    - name: Générer la liste des ID candidats
      set_fact:
        candidats_ids: "{{ range(1, 1000) | list }}"

    - name: Définir le plus petit ID libre
      set_fact:
        next_id: "{{ '%03d' | format(item) }}"
      loop: "{{ candidats_ids }}"
      when: item not in existants_ids
      register: tentative_nom
      until: tentative_nom is succeeded

    - name: Générer le nom unique
      set_fact:
        new_hostname: "{{ prefix }}-{{ next_id }}"

    - name: Afficher le nom généré
      debug:
        msg: "Nom disponible généré : {{ new_hostname }}"

    - name: Générer le fichier d'inventaire dédupliqué
      copy:
        dest: "{{ inventaire_path }}"
        content: |
          [ad_computers]
          {% for name in inventaire_final %}
          {{ name }}.fonteynethekitchen.local
          {% endfor %}

    - name: Afficher l'inventaire écrit
      debug:
        msg: |
          Inventaire actualisé :
          [ad_computers]
          {% for name in inventaire_final %}
          {{ name }}.fonteynethekitchen.local
          {% endfor %}
