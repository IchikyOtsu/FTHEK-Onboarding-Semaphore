- name: Générer un nom unique et mettre à jour l'inventaire AD
  hosts: localhost
  gather_facts: no

  vars:
    departement: "IT"
    type_machine: "LAPTOP"
    prefix: "{{ departement }}-{{ type_machine }}"

  tasks:
    - name: Lire l'inventaire existant s’il existe
      slurp:
        src: "{{ inventaire_path }}"
      register: inventaire_slurp
      ignore_errors: yes

    - name: Extraire les noms existants
      set_fact:
        noms_existants: >-
          {{
            (
              inventaire_slurp.content | b64decode | split('\n')
              | reject('match', '^\[.*\]')
              | reject('equalto', '')
              | map('regex_replace', '\.fonteynethekitchen\.local$', '')
              | list
            ) if
            inventaire_slurp is defined and inventaire_slurp.failed is not defined and 'content' in inventaire_slurp
            else []
          }}

    - name: Extraire les noms avec ce préfixe
      set_fact:
        existants: "{{ noms_existants | select('match', '^' ~ prefix ~ '-\\d{3}$') | list }}"

    - name: Extraire les IDs déjà pris
      set_fact:
        ids_existants: "{{ existants | map('regex_replace', '^' ~ prefix ~ '-(\\d{3})$', '\\1') | map('int') | list }}"

    - name: Générer le plus petit ID libre
      set_fact:
        next_id: "{{ (range(1, 1000) | difference(ids_existants | default([])) | list | min) | int }}"

    - name: Générer le nom final unique
      set_fact:
        new_hostname: "{{ prefix }}-{{ '%03d' | format(next_id) }}"

    - name: Afficher le nom généré
      debug:
        msg: "Nom à appliquer : {{ new_hostname }}"

    - name: Mettre à jour l'inventaire sans doublon
      copy:
        dest: "{{ inventaire_path }}"
        content: |
          [ad_computers]
          {% for name in (noms_existants + [new_hostname]) | unique | sort %}
          {{ name }}.fonteynethekitchen.local
          {% endfor %}
