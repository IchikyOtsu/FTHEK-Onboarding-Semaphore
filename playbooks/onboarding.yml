---
- name: Onboarding automatique depuis fichier texte
  hosts: onboarding
  gather_facts: yes

  vars:
    inventaire_path: "/tmp/semaphore/inventaire_ad.ini"

    prefix_map:
      IT:  "IT-LAPTOP"
      HR:  "HR-LAPTOP"
      FIN: "FIN-LAPTOP"
      COM: "COM-LAPTOP"

  tasks:
  ###################################################################
  # 0) Charger l’inventaire une seule fois sur le contrôleur
  ###################################################################
  - name: Charger l'inventaire (peut être absent)
    slurp:
      src: "{{ inventaire_path }}"
    register: inventaire_slurp
    ignore_errors: true
    delegate_to: localhost
    run_once: true

  - name: Partager le contenu (base64) à tous les hôtes
    set_fact:
      inventaire_b64_global: "{{ inventaire_slurp.content | default('') }}"
    delegate_to: localhost
    delegate_facts: true
    run_once: true

  ###################################################################
  # 1) Département du poste Windows
  ###################################################################
  - name: Lire le département
    ansible.windows.win_shell: Get-Content -Path 'C:\\departement.txt'
    register: departement_raw

  - name: Nettoyer le département
    set_fact:
      departement: "{{ departement_raw.stdout | trim }}"

  - name: Vérifier département
    fail:
      msg: "Département « {{ departement }} » non reconnu"
    when: departement not in prefix_map

  ###################################################################
  # 2) Construire la liste des noms existants et calculer le prochain
  ###################################################################
  - name: Construire la liste des lignes du fichier ini
    set_fact:
      inventaire_lignes: >-
        {{
          hostvars['localhost'].inventaire_b64_global | length > 0
          | ternary(
              (hostvars['localhost'].inventaire_b64_global | b64decode | split('\n')),
              []
            )
        }}

  - name: Filtrer les noms existants du même département
    set_fact:
      existants: >-
        {{
          inventaire_lignes
          | reject('match', '^\\[.*\\]')
          | reject('equalto', '')
          | map('regex_replace', '\\..*$', '')
          | select('match', '^' ~ prefix_map[departement] ~ '-\\d{3}$')
          | list
        }}

  - name: IDs déjà pris
    set_fact:
      existants_ids: "{{ existants
                        | map('regex_replace', '^.*-(\\d{3})$', '\\1')
                        | map('int')
                        | list }}"

  - name: Prochain ID libre
    set_fact:
      next_id: "{{ '%03d' % ((range(1, 1000) | difference(existants_ids)) | min) }}"

  - name: Construire le nouveau nom
    set_fact:
      new_hostname: "{{ prefix_map[departement] }}-{{ next_id }}"

  - debug:
      msg: "Nom à appliquer : {{ new_hostname }}"

  ###################################################################
  # 3) Renommer + reboot
  ###################################################################
  - name: Appliquer le nom de machine
    ansible.windows.win_hostname:
      name: "{{ new_hostname }}"
    register: rename_result

  - ansible.windows.win_reboot:
    when: rename_result.changed

  ###################################################################
  # 4) Mettre à jour l’inventaire (une seule fois, sur localhost)
  ###################################################################
  - name: Mettre à jour l’inventaire
    copy:
      dest: "{{ inventaire_path }}"
      content: |
        [ad_computers]
        {% for n in (existants + [new_hostname]) | unique | sort %}
        {{ n }}.fonteynethekitchen.local
        {% endfor %}
    when: new_hostname not in existants
    delegate_to: localhost
    connection: local
    run_once: true

  - debug:
      msg: "Inventaire mis à jour avec {{ new_hostname }}"
    when: new_hostname not in existants
    run_once: true
