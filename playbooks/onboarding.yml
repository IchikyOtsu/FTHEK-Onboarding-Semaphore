---
- name: Onboarding automatique depuis fichier texte
  hosts: onboarding
  gather_facts: yes          # facts Windows nécessaires pour win_hostname

  vars:
    inventaire_path: "/tmp/semaphore/inventaire_ad.ini"
    prefix_map:
      IT:  "IT-LAPTOP"
      HR:  "HR-LAPTOP"
      FIN: "FIN-LAPTOP"
      COM: "COM-LAPTOP"

  tasks:
    ###################################################################
    # 0) Charger l’inventaire (une seule fois, sur localhost)
    ###################################################################
    - name: Charger l'inventaire
      slurp:
        src: "{{ inventaire_path }}"
      register: inventaire_slurp
      ignore_errors: true          # 1ʳᵉ exécution : le fichier peut ne pas exister
      delegate_to: localhost
      run_once: true

    - name: Stocker le contenu inventaire global
      set_fact:
        inventaire_content_b64_global: "{{ inventaire_slurp.content | default('') }}"
      delegate_to: localhost
      delegate_facts: true         # ← rend la variable visible à tous les hôtes
      run_once: true

    ###################################################################
    # 1) Lire & valider le département du poste Windows
    ###################################################################
    - name: Lire le département
      ansible.windows.win_shell: Get-Content -Path 'C:\\departement.txt'
      register: departement_raw

    - name: Nettoyer
      set_fact:
        departement: "{{ departement_raw.stdout | trim }}"

    - name: Vérifier département
      fail:
        msg: "Département « {{ departement }} » non reconnu"
      when: departement not in prefix_map

    ###################################################################
    # 2) Construire la liste des noms existants et calculer le prochain
    ###################################################################
    - name: Initialiser la liste des lignes
      set_fact:
        inventaire_lignes: []

    - name: Décoder l'inventaire s'il existe
      set_fact:
        inventaire_lignes: "{{ (hostvars['localhost'].inventaire_content_b64_global | b64decode).split('\n') }}"
      when: hostvars['localhost'].inventaire_content_b64_global | length > 0

    - name: Filtrer les noms existants du même département
      set_fact:
        existants: >-
          {{
            inventaire_lignes
            | reject('match', '^\[.*\]')          # supprime les sections ini
            | reject('equalto', '')               # lignes vides
            | map('regex_replace', '\..*$', '')   # retire le domaine
            | select('match', '^' ~ prefix_map[departement] ~ '-\d{3}$')
            | list
          }}

    - name: IDs déjà pris
      set_fact:
        existants_ids: "{{ existants
                          | map('regex_replace','^.*-(\\d{3})$','\\1')
                          | map('int') | list }}"

    - name: Déterminer le prochain ID libre
      set_fact:
        next_id: "{{ '%03d' % ((range(1,1000) | difference(existants_ids)) | min) }}"

    - name: Construire le nouveau nom
      set_fact:
        new_hostname: "{{ prefix_map[departement] }}-{{ next_id }}"

    - debug:
        msg: "Nom à appliquer : {{ new_hostname }}"

    ###################################################################
    # 3) Renommer la machine + reboot si nécessaire
    ###################################################################
    - name: Appliquer le nom
      ansible.windows.win_hostname:
        name: "{{ new_hostname }}"
      register: rename_result

    - ansible.windows.win_reboot:
      when: rename_result.changed

    ###################################################################
    # 4) Mettre à jour l'inventaire (localhost, une seule fois)
    ###################################################################
    - name: Mettre à jour l’inventaire
      copy:
        dest: "{{ inventaire_path }}"
        content: |
          [ad_computers]
          {% for n in (existants + [new_hostname]) | unique | sort %}
          {{ n }}.fonteynethekitchen.local
          {% endfor %}
      when: new_hostname not in existants
      delegate_to: localhost
      connection: local
      run_once: true

    - debug:
        msg: "Inventaire mis à jour avec {{ new_hostname }}"
      when: new_hostname not in existants
      run_once: true
