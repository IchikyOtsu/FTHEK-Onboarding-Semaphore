---
- name: Onboarding automatique depuis fichier texte
  hosts: onboarding
  gather_facts: yes

  vars:
    inventaire_path: "/tmp/semaphore/inventaire_ad.ini"
    fqdn_suffix: ".fonteynethekitchen.local"

    prefix_map:
      IT:  "IT-LAPTOP"
      HR:  "HR-LAPTOP"
      FIN: "FIN-LAPTOP"
      COM: "COM-LAPTOP"

  tasks:
  ###################################################################
  # 0) Lire le fichier inventaire UNE fois sur le contrôleur
  ###################################################################
  - name: Lire le contenu du fichier (vide si absent)
    set_fact:
      inventaire_txt: "{{ lookup('file', inventaire_path, errors='ignore') | default('') }}"
    delegate_to: localhost
    delegate_facts: true
    run_once: true
    vars:
      ansible_connection: local          # force la connexion locale

  ###################################################################
  # 1) Département
  ###################################################################
  - name: Lire le département
    ansible.windows.win_shell: Get-Content -Path 'C:\\departement.txt'
    register: departement_raw

  - set_fact:
      departement: "{{ departement_raw.stdout | trim }}"

  - fail:
      msg: "Département « {{ departement }} » non reconnu"
    when: departement not in prefix_map

  ###################################################################
  # 2) Construire la liste des hostnames existants
  ###################################################################
  - name: Hostnames déjà dans l’inventaire
    set_fact:
      inventaire_hostnames: >-
        {{
          hostvars['localhost'].inventaire_txt.splitlines()
          | reject('match', '^\\s*\\[.*\\]')              # ignore les sections ini
          | reject('equalto', '')
          | list
        }}

  - name: Hostnames du même département
    set_fact:
      existants_dep: >-
        {{
          inventaire_hostnames
          | map('regex_replace', '\\..*$', '')            # retire le domaine
          | select('match', '^' ~ prefix_map[departement] ~ '-\\d{3}$')
          | list
        }}

  - name: IDs déjà pris
    set_fact:
      existants_ids: "{{ existants_dep
                        | map('regex_replace', '^.*-(\\d{3})$', '\\1')
                        | map('int')
                        | list }}"

  - name: Trouver le plus petit ID libre
    set_fact:
      next_id: "{{ '%03d' % ((range(1,1000) | difference(existants_ids)) | min) }}"

  - name: Définir le hostname et le FQDN
    set_fact:
      new_hostname: "{{ prefix_map[departement] }}-{{ next_id }}"
      new_fqdn: "{{ prefix_map[departement] }}-{{ next_id }}{{ fqdn_suffix }}"

  - debug:
      msg: "→ Nom choisi : {{ new_hostname }}"

  ###################################################################
  # 3) Renommer le poste + reboot si besoin
  ###################################################################
  - name: Appliquer le nouveau nom
    ansible.windows.win_hostname:
      name: "{{ new_hostname }}"
    register: rename_result

  - ansible.windows.win_reboot:
    when: rename_result.changed

  ###################################################################
  # 4) Ajouter la ligne dans l’inventaire (si absente)
  ###################################################################
  - name: Créer la section [ad_computers] si besoin
    lineinfile:
      path: "{{ inventaire_path }}"
      line: "[ad_computers]"
      state: present
      create: yes
    delegate_to: localhost
    connection: local
    run_once: true

  - name: Ajouter le FQDN uniquement s'il n'existe pas
    lineinfile:
      path: "{{ inventaire_path }}"
      line: "{{ new_fqdn }}"
      insertafter: "^\\[ad_computers\\]$"
      state: present
    when: new_fqdn not in inventaire_hostnames
    delegate_to: localhost
    connection: local
    run_once: true

  - debug:
      msg: "Inventaire mis à jour avec {{ new_fqdn }}"
    when: new_fqdn not in inventaire_hostnames
    run_once: true
